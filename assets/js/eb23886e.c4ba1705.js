"use strict";(self.webpackChunk_1_relation_documentation=self.webpackChunk_1_relation_documentation||[]).push([[700],{1305:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>r,contentTitle:()=>o,default:()=>h,frontMatter:()=>l,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"JSON/actions-crud","title":"CRUD Operations","description":"A guide to using CRUD (Create, Read, Update, Delete) actions in FlowAgent.","source":"@site/docs/JSON/actions-crud.md","sourceDirName":"JSON","slug":"/JSON/actions-crud","permalink":"/docs/JSON/actions-crud","draft":false,"unlisted":false,"editUrl":"https://github.com/flowagentnu/1rel-documentation/tree/main/docs/JSON/actions-crud.md","tags":[],"version":"current","frontMatter":{},"sidebar":"docs","previous":{"title":"JSON Actions","permalink":"/docs/JSON/json-actions"},"next":{"title":"File Actions","permalink":"/docs/JSON/actions-files"}}');var s=i(4848),a=i(8453);const l={},o="CRUD Operations",r={},d=[{value:"When to Use",id:"when-to-use",level:2},{value:"How It Works",id:"how-it-works",level:2},{value:"Available CRUD Operations",id:"available-crud-operations",level:2},{value:"Custom Fields in CRUD Operations",id:"custom-fields-in-crud-operations",level:2},{value:"Batch Operations",id:"batch-operations",level:2},{value:"Usage Examples",id:"usage-examples",level:2},{value:"Example 1: Insert Operation",id:"example-1-insert-operation",level:3},{value:"Example 2: Update Operation",id:"example-2-update-operation",level:3},{value:"Example 3: Delete Operation",id:"example-3-delete-operation",level:3},{value:"Example 4: Relate Operation",id:"example-4-relate-operation",level:3},{value:"Example 5: Dynamic Data Operation",id:"example-5-dynamic-data-operation",level:3},{value:"Example 6: Multiple Items in CRUD Actions",id:"example-6-multiple-items-in-crud-actions",level:3},{value:"Tips",id:"tips",level:2},{value:"Related Links",id:"related-links",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"crud-operations",children:"CRUD Operations"})}),"\n",(0,s.jsx)(n.p,{children:"A guide to using CRUD (Create, Read, Update, Delete) actions in FlowAgent."}),"\n",(0,s.jsx)(n.h2,{id:"when-to-use",children:"When to Use"}),"\n",(0,s.jsx)(n.p,{children:"Use this page when you want to automate data management: creating, updating, deleting, or relating items."}),"\n",(0,s.jsx)(n.h2,{id:"how-it-works",children:"How It Works"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"CRUD actions are used in automations, forms, and buttons."}),"\n",(0,s.jsx)(n.li,{children:"Supports batch operations for multiple items."}),"\n",(0,s.jsx)(n.li,{children:"Custom fields can be set with fixed values, form values, or references."}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"available-crud-operations",children:"Available CRUD Operations"}),"\n",(0,s.jsxs)(n.p,{children:["You can use the following operations in your ",(0,s.jsx)(n.code,{children:"crud"})," action:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"insert"})," (object): Adds new data items to the system."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"update"})," (object): Modifies existing data items."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"delete"})," (array): Removes data items from the system."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"relate"})," (array): Defines or updates relationships between data items."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"dynamicdata"})," (object): Handles operations involving data that needs to be processed dynamically before further action."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"custom-fields-in-crud-operations",children:"Custom Fields in CRUD Operations"}),"\n",(0,s.jsx)(n.p,{children:"When assigning values to custom fields in CRUD actions, you can use:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Fixed Value"}),": Assign a fixed value directly to the custom field."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Form Field Value"}),": Use a value entered by the user in a form field (e.g., ",(0,s.jsx)(n.code,{children:"[post.name]"}),")."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Form Field with Strip Option"}),": Strip the ",(0,s.jsx)(n.code,{children:"option_"})," prefix from dropdown values if needed."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Dropdown Option"}),": Assign a value from a dropdown custom field using ",(0,s.jsx)(n.code,{children:"option_xxx"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Referenced Custom Field"}),": Reference another item's custom field (e.g., ",(0,s.jsx)(n.code,{children:"[selfitem.cf323]"}),")."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"batch-operations",children:"Batch Operations"}),"\n",(0,s.jsx)(n.p,{children:"You can perform actions on multiple items at once (batch operations) for update, delete, or relate. This is useful for modifying or cleaning up many records in a single action."}),"\n",(0,s.jsx)(n.h2,{id:"usage-examples",children:"Usage Examples"}),"\n",(0,s.jsx)(n.h3,{id:"example-1-insert-operation",children:"Example 1: Insert Operation"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "actions": [\n    {\n      "name": "Insert New Item",\n      "then": {\n        "crud": {\n          "insert": {\n            "newItem": {\n              "moduleid": 50,\n              "moduleitemtype_id": "111",\n              "customfield": {\n                "cf100": "[post.value1]",\n                "cf101": "[post.value2]"\n              }\n            }\n          }\n        }\n      }\n    }\n  ]\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"example-2-update-operation",children:"Example 2: Update Operation"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "actions": [\n    {\n      "name": "Update Existing Item",\n      "then": {\n        "crud": {\n          "update": {\n            "existingItem": {\n              "moduleitemtype_id": "112",\n              "customfield": {\n                "cf102": "[post.value3]",\n                "cf103": "[post.value4]"\n              }\n            }\n          }\n        }\n      }\n    }\n  ]\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"example-3-delete-operation",children:"Example 3: Delete Operation"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "actions": [\n    {\n      "name": "Delete Item",\n      "then": {\n        "crud": {\n          "delete": [\n            "itemToDelete"\n          ]\n        }\n      }\n    }\n  ]\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"example-4-relate-operation",children:"Example 4: Relate Operation"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "actions": [\n    {\n      "name": "Relate Items",\n      "then": {\n        "crud": {\n          "relate": [\n            {\n              "child": "childItemKey",\n              "parent": "parentItemKey",\n              "relationid": 123,\n              "unlink": false\n            }\n          ]\n        }\n      }\n    }\n  ]\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"example-5-dynamic-data-operation",children:"Example 5: Dynamic Data Operation"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "actions": [\n    {\n      "name": "Handle Dynamic Data",\n      "then": {\n        "crud": {\n          "dynamicdata": {\n            "module_id": 60,\n            "where": [\n              [\n                "moduleitemtype_id",\n                "=",\n                132\n              ],\n              [\n                "cf610.string",\n                "=",\n                "option_818"\n              ]\n            ],\n            "createInModule": {\n              "moduleitemtype_id": 103,\n              "module_id": 60,\n              "customfield": {\n                "cf460": "dynamicdata[cf460]",\n                "cf645": "dynamicdata[cf645]",\n                "cf463": "dynamicdata[cf463]",\n                "cf461": "[selfitem.cf323]"\n              },\n              "relations": [\n                {\n                  "parent": "salgstur",\n                  "child": "dynamicitem"\n                }\n              ]\n            }\n          }\n        }\n      }\n    }\n  ]\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"example-6-multiple-items-in-crud-actions",children:"Example 6: Multiple Items in CRUD Actions"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "items": {\n    "projects": [\n      [\n        "id",\n        "=",\n        "[itemid]"\n      ]\n    ],\n    "tasks[]": [\n      [\n        "id",\n        "IN",\n        "[relation80]"\n      ]\n    ]\n  },\n  "visibility": {\n    "visual": {\n      "text": "Update and delete",\n      "textColor": "white",\n      "bgColor": "danger",\n      "icon": "warning",\n      "displayIconOnly": false\n    }\n  },\n  "actions": [\n    {\n      "name": "Update and delete multiple items",\n      "then": {\n        "crud": {\n          "update": {\n            "projects[]": {\n              "customfield": {\n                "cf649": "option_863"\n              }\n            }\n          },\n          "delete": [\n            "tasks[]"\n          ]\n         }\n       }\n     }\n  ]\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"In the above example, the action performs updates on multiple projects and deletes multiple tasks:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Items"}),": The ",(0,s.jsx)(n.code,{children:"items"})," section defines the target items for the actions. In this case, it targets ",(0,s.jsx)(n.code,{children:"projects"})," with a specific ID and ",(0,s.jsx)(n.code,{children:"tasks"})," related to ",(0,s.jsx)(n.code,{children:"relation80"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Update"}),": The ",(0,s.jsx)(n.code,{children:"update"})," operation modifies a custom field (",(0,s.jsx)(n.code,{children:"cf649"}),") for all projects matching the specified condition."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Delete"}),": The ",(0,s.jsx)(n.code,{children:"delete"})," operation removes all tasks matching the specified condition."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Visibility"}),": The ",(0,s.jsx)(n.code,{children:"visibility"})," section provides a visual indicator for the action, which helps in identifying the nature of the action in the user interface."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"This approach allows for efficient management of multiple items, reducing the need for repetitive actions and ensuring consistency across your system."}),"\n",(0,s.jsx)(n.h2,{id:"tips",children:"Tips"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Use batch operations to update or delete multiple items at once."}),"\n",(0,s.jsxs)(n.li,{children:["Reference custom fields by their key (e.g., ",(0,s.jsx)(n.code,{children:"cf100"}),")."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"related-links",children:"Related Links"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"/docs/JSON/json-actions",children:"JSON Actions"})}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.p,{children:"For more on advanced CRUD, see the JSON Actions documentation."})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>l,x:()=>o});var t=i(6540);const s={},a=t.createContext(s);function l(e){const n=t.useContext(a);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);