"use strict";(self.webpackChunk_1_relation_documentation=self.webpackChunk_1_relation_documentation||[]).push([[7898],{641:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>d,toc:()=>a});var i=n(5893),s=n(1151);const o={},r="Note",d={id:"JSON/actions-note",title:"Note",description:"Ability to upsert or append a note. Upsert means to insert a new note or update an existing one if it already exists by overwriting the existing note.",source:"@site/docs/JSON/actions-note.md",sourceDirName:"JSON",slug:"/JSON/actions-note",permalink:"/docs/JSON/actions-note",draft:!1,unlisted:!1,editUrl:"https://github.com/flowagentnu/1rel-documentation/tree/main/docs/JSON/actions-note.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Call webhook",permalink:"/docs/JSON/actions-webhook"},next:{title:"Files",permalink:"/docs/JSON/actions-files"}},l={},a=[{value:"Examples",id:"examples",level:2},{value:"Example 1: Upsert a note",id:"example-1-upsert-a-note",level:3},{value:"Example 1: Append a note",id:"example-1-append-a-note",level:3}];function c(e){const t={code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,s.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h1,{id:"note",children:"Note"}),"\n",(0,i.jsx)(t.p,{children:"Ability to upsert or append a note. Upsert means to insert a new note or update an existing one if it already exists by overwriting the existing note."}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Property"}),(0,i.jsx)(t.th,{children:"Type"}),(0,i.jsx)(t.th,{children:"Default Value"}),(0,i.jsx)(t.th,{children:"Options"}),(0,i.jsx)(t.th,{children:"Description"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"title"})}),(0,i.jsx)(t.td,{children:"string"}),(0,i.jsx)(t.td,{children:"(empty)"}),(0,i.jsx)(t.td,{children:"N/A"}),(0,i.jsx)(t.td,{children:"The title of the note."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"text"})}),(0,i.jsx)(t.td,{children:"string"}),(0,i.jsx)(t.td,{children:"(empty)"}),(0,i.jsx)(t.td,{children:"N/A"}),(0,i.jsx)(t.td,{children:"The content of the note."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"itemKey"})}),(0,i.jsx)(t.td,{children:"string"}),(0,i.jsx)(t.td,{children:"(empty)"}),(0,i.jsx)(t.td,{children:"N/A"}),(0,i.jsx)(t.td,{children:"The key of the item to relate the note to."})]})]})]}),"\n",(0,i.jsx)(t.h2,{id:"examples",children:"Examples"}),"\n",(0,i.jsx)(t.h3,{id:"example-1-upsert-a-note",children:"Example 1: Upsert a note"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-json",children:'{\n    "upsert": {\n        "title": "This is my note title",\n        "text": "This is my note text",\n        "itemKey": "item"\n    }\n}\n'})}),"\n",(0,i.jsx)(t.h3,{id:"example-1-append-a-note",children:"Example 1: Append a note"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-json",children:'{\n    "append": {\n        "title": "This is my note title",\n        "text": "This is my note text",\n        "itemKey": "item"\n    }\n}\n'})})]})}function h(e={}){const{wrapper:t}={...(0,s.a)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},1151:(e,t,n)=>{n.d(t,{Z:()=>d,a:()=>r});var i=n(7294);const s={},o=i.createContext(s);function r(e){const t=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function d(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(o.Provider,{value:t},e.children)}}}]);