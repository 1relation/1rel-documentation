"use strict";(self.webpackChunk_1_relation_documentation=self.webpackChunk_1_relation_documentation||[]).push([[1587],{3473:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>l,default:()=>a,frontMatter:()=>o,metadata:()=>r,toc:()=>c});var s=n(5893),i=n(1151);const o={},l="Module Item Types",r={id:"modules/module-item-types",title:"Module Item Types",description:"Module Item Types are used to differentiate items in each module. This is a useful functionality as it reduces the need to create extra modules when the difference between the type of items isn\u2019t too wide.",source:"@site/docs/modules/module-item-types.md",sourceDirName:"modules",slug:"/modules/module-item-types",permalink:"/docs/modules/module-item-types",draft:!1,unlisted:!1,editUrl:"https://github.com/1relation/1rel-documentation/tree/main/docs/modules/module-item-types.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Custom Fields",permalink:"/docs/modules/customfields"},next:{title:"Relations",permalink:"/docs/modules/relations"}},d={},c=[{value:"Setup types",id:"setup-types",level:2},{value:"Configuring types",id:"configuring-types",level:2},{value:"Delete",id:"delete",level:2}];function u(e){const t={h1:"h1",h2:"h2",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,i.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h1,{id:"module-item-types",children:"Module Item Types"}),"\n",(0,s.jsx)(t.p,{children:"Module Item Types are used to differentiate items in each module. This is a useful functionality as it reduces the need to create extra modules when the difference between the type of items isn\u2019t too wide."}),"\n",(0,s.jsx)(t.p,{children:'For example, a module used for "orders" can have different types like:'}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"Journal"}),"\n",(0,s.jsx)(t.li,{children:"Delivery"}),"\n",(0,s.jsx)(t.li,{children:"Waste"}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"By creating different types, it's possible to assign other FlowAgent functions. These are:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"Customfields"}),"\n",(0,s.jsx)(t.li,{children:"Tabs"}),"\n",(0,s.jsx)(t.li,{children:"Relations"}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"setup-types",children:"Setup types"}),"\n",(0,s.jsx)(t.p,{children:"Follow the steps below to create a new type:"}),"\n",(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsx)(t.li,{children:"Select the module you wish to create/edit a customfield for."}),"\n",(0,s.jsx)(t.li,{children:'Navigate to "Settings".'}),"\n",(0,s.jsx)(t.li,{children:'Choose the "Types" option.'}),"\n",(0,s.jsx)(t.li,{children:'Click on "Create" or edit an existing one.'}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"configuring-types",children:"Configuring types"}),"\n",(0,s.jsx)(t.p,{children:"After initiating the creation of a new type, you'll need to provide the following information:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Name"}),": Specify the name of the type."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Customfields"}),": Choose which customfields this type should have access to."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Tabs"}),": Choose which tabs should be available for this type."]}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"Finish creating a type by pressing save."}),"\n",(0,s.jsx)(t.h2,{id:"delete",children:"Delete"}),"\n",(0,s.jsx)(t.p,{children:"If a type is not needed anymore, you can delete it using the icon from the list below."})]})}function a(e={}){const{wrapper:t}={...(0,i.a)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},1151:(e,t,n)=>{n.d(t,{Z:()=>r,a:()=>l});var s=n(7294);const i={},o=s.createContext(i);function l(e){const t=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),s.createElement(o.Provider,{value:t},e.children)}}}]);